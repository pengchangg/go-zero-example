// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	entTypesFieldNames          = builder.RawFieldNames(&EntTypes{})
	entTypesRows                = strings.Join(entTypesFieldNames, ",")
	entTypesRowsExpectAutoSet   = strings.Join(stringx.Remove(entTypesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	entTypesRowsWithPlaceHolder = strings.Join(stringx.Remove(entTypesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheEntDemoEntTypesIdPrefix   = "cache:entDemo:entTypes:id:"
	cacheEntDemoEntTypesTypePrefix = "cache:entDemo:entTypes:type:"
)

type (
	entTypesModel interface {
		Insert(ctx context.Context, data *EntTypes) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*EntTypes, error)
		FindOneByType(ctx context.Context, tp string) (*EntTypes, error)
		Update(ctx context.Context, data *EntTypes) error
		Delete(ctx context.Context, id int64) error
	}

	defaultEntTypesModel struct {
		sqlc.CachedConn
		table string
	}

	EntTypes struct {
		Id   int64  `db:"id"`
		Type string `db:"type"`
	}
)

func newEntTypesModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultEntTypesModel {
	return &defaultEntTypesModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`ent_types`",
	}
}

func (m *defaultEntTypesModel) withSession(session sqlx.Session) *defaultEntTypesModel {
	return &defaultEntTypesModel{
		CachedConn: m.CachedConn.WithSession(session),
		table:      "`ent_types`",
	}
}

func (m *defaultEntTypesModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	entDemoEntTypesIdKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesIdPrefix, id)
	entDemoEntTypesTypeKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesTypePrefix, data.Type)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, entDemoEntTypesIdKey, entDemoEntTypesTypeKey)
	return err
}

func (m *defaultEntTypesModel) FindOne(ctx context.Context, id int64) (*EntTypes, error) {
	entDemoEntTypesIdKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesIdPrefix, id)
	var resp EntTypes
	err := m.QueryRowCtx(ctx, &resp, entDemoEntTypesIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", entTypesRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEntTypesModel) FindOneByType(ctx context.Context, tp string) (*EntTypes, error) {
	entDemoEntTypesTypeKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesTypePrefix, tp)
	var resp EntTypes
	err := m.QueryRowIndexCtx(ctx, &resp, entDemoEntTypesTypeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `type` = ? limit 1", entTypesRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tp); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultEntTypesModel) Insert(ctx context.Context, data *EntTypes) (sql.Result, error) {
	entDemoEntTypesIdKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesIdPrefix, data.Id)
	entDemoEntTypesTypeKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesTypePrefix, data.Type)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, entTypesRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Type)
	}, entDemoEntTypesIdKey, entDemoEntTypesTypeKey)
	return ret, err
}

func (m *defaultEntTypesModel) Update(ctx context.Context, newData *EntTypes) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	entDemoEntTypesIdKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesIdPrefix, data.Id)
	entDemoEntTypesTypeKey := fmt.Sprintf("%s%v", cacheEntDemoEntTypesTypePrefix, data.Type)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, entTypesRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Type, newData.Id)
	}, entDemoEntTypesIdKey, entDemoEntTypesTypeKey)
	return err
}

func (m *defaultEntTypesModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheEntDemoEntTypesIdPrefix, primary)
}

func (m *defaultEntTypesModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", entTypesRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultEntTypesModel) tableName() string {
	return m.table
}
